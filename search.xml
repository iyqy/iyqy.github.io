<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[神汽在线产品分析报告（word）]]></title>
      <url>http://qianyu1996.com/2017/02/08/sqzx/</url>
      <content type="html"><![CDATA[<p></p><h3>体验环境</h3><br>体验产品：神汽在线Android版本<br>软件版本：Android v2.7.1<br>设备型号：华为荣耀7<br>操作系统：EMUI 4.0.1<br><br><br><a href="http://pan.baidu.com/s/1bMAXVS" target="_blank" rel="external">神汽在线产品分析报告（word）下载<a><br><a id="more"></a><p></p>
</a></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[三部曲方法论]]></title>
      <url>http://qianyu1996.com/2016/11/22/idea/</url>
      <content type="html"><![CDATA[<p>描述需求 需求的最终状态–给定环境输入和输出<br>1.善用逻辑图（不同于流程图），需求子需求。用图形表达一个部分和另一部分的逻辑关系（并列，包含，基础等）keynote<br>2.思维导图拆解需求，需求-子需求—-表单设计，问题分解 测试用例，用例图<br>3.visio拆解流程，比如京东购物的行为，拆解成子流程（注册流程，加入购物车等等）<br>4。拆解UI和交互，得到axure原型 （线框图）</p>
<p>得到一组测试用例（产品，模块，功能，环境，输入，预期输出，实际输出），流程图，原型（或者线框图）<br><a id="more"></a><br>实现需求<br>1.mvp minimal viable product 核心业务逻辑已经跑通的情况最小可用产品雏形<br>2.寻找组织工具链–卖电子书（下单支付）–金数据 麦克斯扬MN，表单工具生成表单。<br>3.理解技术，会编程指的是mvp时工具链某些模块功能覆盖不到的。</p>
<p>项目管理<br>1.假设（基于一个假设来推荐项目）<br>2.同级别的，怎么按照你的想法来达成你的目标呢？善用契约-开会是种形式，为了定下一组契约，书面的东西更加正式<br>3.保持真诚，（同时注意说话的艺术）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[京东天猫app模块拆解]]></title>
      <url>http://qianyu1996.com/2016/11/20/page/</url>
      <content type="html"><![CDATA[<body><br><h1 align="center" class="root"><br><a name="tm">天猫APP</a><br></h1><br><a id="more"></a><br><h1 align="center">（ctrl+鼠标向前滚轮来查看图片）</h1><br><br><br><br><br><div align="center" class="globalOverview"><br><img src="http://occtjfc90.bkt.clouddn.com/img/%E5%A4%A9%E7%8C%ABAPP.jpg"></div><br><br><h1 align="center" class="root"><br><a name="tm">京东APP（ctrl+鼠标向前滚轮来查看图片）</a><br></h1><br><br><div align="center" class="globalOverview"><br><img src="http://occtjfc90.bkt.clouddn.com/img/%E4%BA%AC%E4%B8%9CAPP%202.jpg"></div><br></body>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机组成原理]]></title>
      <url>http://qianyu1996.com/2016/09/11/zcyl/</url>
      <content type="html"><![CDATA[<p></p><h3>计算机系统概论</h3><br>1.什么是计算机系统，计算机硬件，计算机软件？<br>计算机系统分为计算机硬件和计算机软件两部分，所谓硬件指的是计算机看的见的物理元器件，如主机和各种外设<br>所谓软件指的是人们事先编好的程序，基于硬件部分，能够更好的利用分配资源，充分发挥硬件的功能。<p></p>
<p>2.如何理解计算机系统的层次结构？<br>一般分为五级结构，从底层到高级部分依次为：微程序机器（硬件直接执行微指令）-机器语言机器（微程序解析机器指令）-<br>操作系统虚拟机（机器语言解释操作系统）-汇编语言虚拟机（汇编语言翻译成机器语言）-高级语言虚拟机（编译成汇编语言或者机器语言）</p>
<p>3.说明高级语言，汇编语言和机器语言的差别和联系？<br>高级语言：通过编译程序或者解释程序，最终转化为机器语言从而在机器上运行。<br>汇编语言：符号式的程序设计语言，每条语言对应一句机器指令（0.1）代码，所以本质上说还是面向实际机器的语言，拜托不了实际机器的指令系统。<br>机器语言：二进制代码表示的语言，编写的程序可以直接在机器上运行。<br><a id="more"></a><br>4.如何立即计算机的组成和体系结构？<br>计算机的体系结构：指的就是我们所看到系统的属性，不同的开发人员所看到的属性是不同的，例如对于高级语言开发者而言，两台型号不同的<br>机器可以看作是同一属性的机器，而对于汇编开发者来说这是两种截然不同的机器，如指令集，寻址技术得到实现都不同。<br>计算机的组成：指的是如何实现计算机体系结构所体现的属性（包含了对程序员来说透明的细节），如机器指令如何取指令，分析指令，取操作数<br>运算，送结果等。</p>
<p>5.冯.诺依曼计算机的特点是？<br>以运算器为中心，存储器，控制器，输入输出设备五大部件组成的计算机。</p>
<p>6.说出计算器赢家的主要技术指标?<br>运算速度：和机器的主频，主存本身的速度有关，现在通常用单位时间内执行的指令平均条数来衡量，MIPS作为计量单位（百万条指令每秒）<br>机器字长：计算机进行一次整数运算所能处理的二进制数据的位数，能直接影响ALU,数据总线以及存储字长的位数。<br>存储容量：主存容量是指主存中存放二进制代码的总位数，MAR的位数反应了存储单元的个数，MDR的位数反应了存储字长。</p>
<p>7.解释概念？<br>主机：通常包括 CPU、内存、硬盘、光驱、电源、以及其他输入输出控制器和接口。<br>CPU：中央处理器是一块超大规模的集成电路，含计算机运算器和控制器。它的功能主要是解释计算机指令以及处理计算机软件中的数据。<br>主存：内存是计算机中重要的部件之一，它是与CPU进行沟通的桥梁，含MDR，MAR以及存储体M。<br>存储单元：存储单元一般应具有存储数据和读写数据的功能，以8位二进制作为一个存储单元，也就是一个字节。<br>存储元，存储基元，存储元件：存储器的最小存储单元，它的作用是用来存放一位二进制代码0或1<br>存储字：存储字是指存放在一个存储单元中的二进制代码组合。可以代表二进制数，16位的二进制数，一个存储字还可代表一条指令<br>存储字长：一个存储单元存储一串二进制代码（存储字），这串二进制代码的位数称为存储字长<br>存储容量：主存容量是指主存中存放二进制代码的总位数<br>机器字长：指计算机进行一次整数运算所能处理的二进制数据的位数<br>指令字长：指令字长是指机器指令中二进制代码的总位数</p>
<p>解释英文代号：<br>CPU:中央处理器 MM:主存（内存）MAR:存储器地址寄存器 MDR:存储器数据寄存器 ALU:算数逻辑单元 X:X寄存器 ACC:累加器 MQ：乘商寄存器<br>PC:程序计数器 CU:控制单元 IR:指令寄存器</p>
<p>指令的取指，分析，执行：<br>机器启动时，控制器将PC的内容送入MAR，命令存储器做读操作，此时MDR中的命令被送至控制器的IR中，此时完成了取指过程<br>经过CU分析，指令中的地址码被推送到MAR中，并命令存储器做读操作，将该地址单元中的操作数推送到MDR中，再由MDR推送到ACC<br>与此同时PC完成加一的操作。</p>
<p>PC：用来存放当前欲执行指令的地址，和MAR存在着一条直接的通路，而且有自动加1的功能。<br>IR：用来存放当前的指令，来自MDR。<br>CU：用来分析指令，将地址码推送至MAR，并命令存储器做读操作读到MDR，然后完操作码对应的操作。</p>
<p></p><h3>系统总线</h3><br>什么是总线？总线有何特点？为了减轻总线的负载，总线上的部件应该具备什么特点？<br>计算机的总线可以划分为数据总线、地址总线和控制总线，分别用来传输数据、数据地址和控制信号<p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS-5用OpenVZ方式搭建VPN通道]]></title>
      <url>http://qianyu1996.com/2016/08/16/VPN/</url>
      <content type="html"><![CDATA[<p>最近租了个VPS，Host1Plus，0.5 Core  256MB 内存 20GB 磁盘 500GB，2美元一个月，机房在芝加哥，预装centos5系统.想尝试一下在这个VPS搭建VPN.<br>搭建方式有OpenVPN，PPTP，SSH<br>OpenVPN比PPTP好伺候，能装在基于OpenVZ虚拟化技术的VPS（PPTP只能装在基于Xen的VPS，但大多数VPS因为成本原因是OpenVZ的）<br>这里采用OpenVPN方式搭建。</p>
<p>准备工作：下载Xshell客户端，连网状态（ChinaNet等公共场合的wifi无效）</p>
<h3>一、OpenVPN需要tun和iptables_nat模块支持，所以先检查你的VPS支持不支持。</h3><br>SSH登陆VPS后输入<br><code>cat /dev/net/tun</code><br>若返回信息为：cat: /dev/net/tun: File descriptor in bad state 说明tun/tap已经可以使用；<br>如果返回：cat: /dev/net/tun: No such device 或其他则说明tun/tap没有被正确配置，发TK联系客服申请开通tun/tap。<br><a id="more"></a><br>然后检查iptables_nat模块（如果还没有安装iptables，先安装）<br><br><code>yum install iptables </code>   #如已安装跳过<br><br>接着请输入：<br><code>iptables -t nat -A POSTROUTING -s 10.168.0.0/16 -j SNAT –to-source 11.22.33.44</code><br>（11.22.33.44是你VPS的IP）<br><br>然后用<br><br><code>iptables -t nat -L</code><br>查看iptables转发状态，如果显示以下类似的结果则说明转发成功：<br>target             prot opt source                      destination<br>SNAT              all – 10.168.0.0/16                anywhere                    to:11.22.33.44<br><br><h3>二、tun和iptables_nat模块检测通过后，正式进入安装阶段：</h3><br>默认情况下CentOS的yum源是没有OpenVPN的,安装EPEL这个东西成功后,yum源里面就有OpenVPN了。<br>5.x版系统安装EPEL：<br><br><code>rpm -Uvh <a href="http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm" target="_blank" rel="external">http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm</a></code><br><br><code>yum -y install openvpn</code><br>对了，在所有步骤之前（就是刚登陆进来时），最好先更新升级下系统，这样可以自动分析当前系统的安装环境并根据具体命令网络升级安装所需组件，更便于之后组件的安装。<br><code>yum -y update</code><br><br><h3>三、安装好后，先使用easy-rsa生成服务端证书：</h3><br>默认OpenVPN的easy-rsa文档会在/usr/share/doc/openvpn/examples/easy-rsa/，如果不在的话请先检查是否安装成功然后用locate或find命令查找该文档。<br>然后将该文档下所需的配置文件复制到/etc/openvpn/下面：<br><br>如果不存在则执行：<br><code>wget <a href="http://swupdate.openvpn.org/community/releases/easy-rsa-2.2.0_master.tar.gz" target="_blank" rel="external">http://swupdate.openvpn.org/community/releases/easy-rsa-2.2.0_master.tar.gz</a></code><br><code>tar -zxvf easy-rsa-2.2.0_master.tar.gz</code><br><code>cp -R easy-rsa-2.2.0_master/easy-rsa/ /etc/openvpn/</code><br><br><br>1、生成CA证书：<br><code>cd /etc/openvpn/easy-rsa/2.0</code><br><code>source vars</code><br><code>./clean-all</code><br><code>./build-ca</code><br>期间会提示输入一些信息，直接回车默认即可。<br><br>2、生成服务器端证书和密钥：（server为服务端名字可以自定义）<br><code>./build-key-server server</code><br>期间也会提示输入一些信息，直接回车默认，选择[Y/n]的都选Y。<br><br>3、生成客户端证书和密钥：（client为客户端名字可以自定义，注意这里的客户端名字不能与上步的服务端名字相同）<br><code>./build-key client</code><br>期间也会提示输入一些信息，直接回车默认，选择[Y/n]的都选Y。<br>若要生成多个客户端的证书和密钥，将client改成另外的名字重复操作即可。所有生成的证书和密钥存都放在/etc/openvpn/easy-rsa/2.0/keys/下面。<br><br>4、生成Diffie Hellman参数：<br><code>./build-dh</code><br><h3>四、配置OpenVPN服务器端文件</h3>

<p>1、编辑/etc/openvpn/server.conf 文件，如果没有可以创建一个，加入下面的内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">local 11.22.33.44    #11.22.33.44为VPS的IP</div><div class="line">port 8080    #端口，需要与客户端配置保持一致，并保证与其他软件无共用</div><div class="line">proto udp    #使用协议，需要与客户端配置保持一致</div><div class="line">dev tun      #也可以选择tap模式</div><div class="line">ca /etc/openvpn/easy-rsa/2.0/keys/ca.crt</div><div class="line">cert /etc/openvpn/easy-rsa/2.0/keys/server.crt</div><div class="line">key /etc/openvpn/easy-rsa/2.0/keys/server.key</div><div class="line">dh /etc/openvpn/easy-rsa/2.0/keys/dh1024.pem</div><div class="line">ifconfig-pool-persist ipp.txt</div><div class="line">server 10.168.1.0 255.255.255.0    #给客户的分配的局域网IP段，注意不要与客户端网段冲突！</div><div class="line">push &amp;quot;redirect-gateway&amp;quot;</div><div class="line">push &amp;quot;dhcp-option DNS 8.8.8.8&amp;quot;</div><div class="line">push &amp;quot;dhcp-option DNS 8.8.4.4&amp;quot;</div><div class="line">client-to-client</div><div class="line">;duplicate-cn</div><div class="line">keepalive 20 60</div><div class="line">comp-lzo</div><div class="line">max-clients 50</div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line">status openvpn-status.log</div><div class="line">log-append openvpn.log</div><div class="line">verb 3</div><div class="line">mute 20</div></pre></td></tr></table></figure>
<p>3、修改/etc/sysctl.conf的内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward = 1</div><div class="line">net.ipv4.conf.all.send_redirects = 0</div><div class="line">net.ipv4.conf.default.send_redirects = 0</div><div class="line">net.ipv4.conf.all.accept_redirects = 0</div><div class="line">net.ipv4.conf.default.accept_redirects = 0</div></pre></td></tr></table></figure></p>
<p>重新载入/etc/sysctl.conf使其生效，执行如下命令：</p>
<p><code>sysctl -p</code><br>至此VPS上的服务器端配置就全部完成了。<br>若想使其配置生效，则需重启OpenVPN服务</p>
<p><code>service openvpn restart –config /etc/openvpn/server.conf</code></p>
<h3>五、安装配置OpenVPN客户端文件</h3>

<p>1、下载安装客户端<br>Windwos用户推荐去openvpn.net选择合适的版本进行安装，安装中的选项全部按默认即可；Mac用户推荐使用tunnelblick。</p>
<p>2、下载之前在VPS上生成的客户端证书及密钥<br>证书和密钥存都在/etc/openvpn/easy-rsa/2.0/keys/里，可以使用winscp链接到VPS上下载，将ca.crt、client.crt、client.key这三个文件下载到OpenVPN客户端程序的config文件夹里,默认为：C:\Program Files\OpenVPN\config<br><code>yum  install lrzsz</code><br>此时再使用sz命令下载</p>
<p>3、创建客户端配置文件<br>在C:\Program Files\OpenVPN\config 下面创建一个sunny.ovpn的文件，添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">client        #这个client不是自定义名称 不能更改</div><div class="line">dev tun       #要与前面server.conf中的配置一致。</div><div class="line">proto udp              #要与前面server.conf中的配置一致。</div><div class="line">remote 11.22.33.44 8080    #将11.22.33.44替换为你VPS的IP，端口与前面的server.conf中配置一致。</div><div class="line">resolv-retry infinite</div><div class="line">nobind</div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line">ca ca.crt              #具体名称以刚下载的为准</div><div class="line">cert client.crt              #具体名称以刚下载的为准</div><div class="line">key client.key              #具体名称以刚下载的为准</div><div class="line">ns-cert-type server</div><div class="line">redirect-gateway</div><div class="line">keepalive 20 60</div><div class="line">#tls-auth ta.key 1</div><div class="line">comp-lzo</div><div class="line">verb 3</div><div class="line">mute 20</div><div class="line">route-method exe</div><div class="line">route-delay 2</div></pre></td></tr></table></figure>
<p></p><h3>六、运行OpenVPN客户端</h3><br>运行OpenVPN GUI后，屏幕右下角的系统托盘区，会显示一个由两个红屏电脑组成的图标，右击它，选中菜单中添加的名为sunny的服务器，点击Connect，<br>过一会儿，OpenVPN图标变成绿色时VPN就表示链接成功了。就表示链接成功了~<p></p>
<p>参考原文：<a href="http://shit.name/openvpn-on-centos/" target="_blank" rel="external">http://shit.name/openvpn-on-centos/<a></a></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM内存模型图解]]></title>
      <url>http://qianyu1996.com/2016/05/26/JVM/</url>
      <content type="html"><![CDATA[<p style="text-align: center;"><img src="http://occtjfc90.bkt.clouddn.com/1.jpg" width="70%" height="62%" alt="内存模型"></p><br><a id="more"></a><br><p style="text-align: center;"><img src="http://occtjfc90.bkt.clouddn.com/2.jpg" width="70%" height="62%" alt="内存模型"></p><br><p style="text-align: center;"><img src="http://occtjfc90.bkt.clouddn.com/3.jpg" width="70%" height="62%" alt="内存模型"></p><br><p style="text-align: center;"><img src="http://occtjfc90.bkt.clouddn.com/4.jpg" width="70%" height="62%" alt="内存模型"></p><br><p style="text-align: center;"><img src="http://occtjfc90.bkt.clouddn.com/5.jpg" width="70%" height="62%" alt="内存模型"></p><br><p style="text-align: center;"><img src="http://occtjfc90.bkt.clouddn.com/6.jpg" width="70%" height="62%" alt="内存模型"></p><br><p style="text-align: center;"><img src="http://occtjfc90.bkt.clouddn.com/7.jpg" width="70%" height="62%" alt="内存模型"></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java类集复习笔记]]></title>
      <url>http://qianyu1996.com/2016/05/25/leiji/</url>
      <content type="html"><![CDATA[<p></p><p style="text-align: center;"><img src="http://occtjfc90.bkt.clouddn.com/leiji.png" width="70%" height="62%" alt="内存模型"></p><p></p>
<p></p><p align="center">————上图为集合类间接口的实现关系————</p><br><a id="more"></a><p></p>
<p>1.了解java设置类集合的主要目的。<br>2.掌握Collection接口的作用和主要方法<br>3.掌握Collection子接口List Set的区别和常用子类的使用<br>4.掌握Map接口的作用，及其常用子类<br>5.SortedSet SortedMap<br>6.Iterator，Enumeration，foreach<br>7.掌握properties的使用<br>8.了解工具类Collection的使用</p>
<p>基本概念：所谓类集就是一个动态的对象数组，不受对象数组长度的限制，类集必须是<br>容易拓展和修改的。</p>
<p>Collection：public interface Collection<e> extends Iterable<e><br>toArray()将集合变成对象数组</e></e></p>
<p>List:public interface List<e> extends Collection<e><br>可以存放重复的内容<br>常用方法：add(在指定位置插入元素时，所有其他元素后移一位),addAll(),get(),indexOf(查找自定元素的位置),ListIterator(),set(替换元素)<br>remove():自定义的类如果要删除就要复写equals，hashCode方法；</e></e></p>
<p>ArrayList和Vector类比较：<br>ArrayList：新操作类，异步处理，性能好，用Iterator，foreach输出<br>Vector：旧操作类，同步处理，性能差，用Iterator，foreach，Enumeration输出<br>Vector方法是addElement</p>
<p>LinkedList：数据结构链表实现FIFO,实现了Queue和List接口<br>addFirst():在链表的开头增加元素<br>addLast():在链表的结尾增加元素</p>
<p>Set：不能存放重复的内容，所有的重复内容靠hashCode()和equals()方法区分；<br>HashSet：散列存放<br>对象删除重复需要对象复写equals方法和hashCode方法<br>代码;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public class Person1 &#123;</div><div class="line"> private String name;</div><div class="line"> private int age;</div><div class="line"></div><div class="line"> public String getName() &#123;</div><div class="line">  return name;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public void setName(String name) &#123;</div><div class="line">  this.name = name;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public int getAge() &#123;</div><div class="line">  return age;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public void setAge(int age) &#123;</div><div class="line">  this.age = age;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public String toString() &#123;</div><div class="line">  return &quot;年齡=&quot; + this.age + &quot;名字=&quot; + this.name;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public boolean equals(Object obj) &#123;</div><div class="line">  if (this == obj) &#123;</div><div class="line">   return true;</div><div class="line">  &#125;</div><div class="line">  if (!(obj instanceof Person1))</div><div class="line"></div><div class="line">  &#123;</div><div class="line">   return false;</div><div class="line">  &#125;</div><div class="line">  Person1 p = (Person1) obj;</div><div class="line">  if (this.name.equals(p.name) &amp;&amp; this.age == this.age) &#123;</div><div class="line">   return true;</div><div class="line">  &#125; else &#123;</div><div class="line">   return false;</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public int hashCode() &#123;</div><div class="line">  return this.name.hashCode() * this.age;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>TreeSet:有序排列<br>对象删除重复需要每个对象都实现Comparable接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class Person implements Comparable&lt;Person&gt; &#123;</div><div class="line"> private String name;</div><div class="line"> private int age;</div><div class="line"></div><div class="line"> public String getName() &#123;</div><div class="line">  return name;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public void setName(String name) &#123;</div><div class="line">  this.name = name;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public int getAge() &#123;</div><div class="line">  return age;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public void setAge(int age) &#123;</div><div class="line">  this.age = age;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public String toString() &#123;</div><div class="line">  return &quot;年齡=&quot; + this.age + &quot;名字=&quot; + this.name;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> public int compareTo(Person o) &#123;</div><div class="line">  if (this.age &gt; o.getAge()) &#123;</div><div class="line">   return 1;</div><div class="line">  &#125; else if (this.age &lt; o.getAge()) &#123;</div><div class="line">   return -1;</div><div class="line">  &#125; else &#123;</div><div class="line"></div><div class="line">   return this.name.compareTo(o.name);</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Queue：队列接口<br>peek（）：找到头结点<br>poll（）找到头节点并删除<br>element（）找到链表的表头</p>
<p>SortedSet：对集合中的数据进行排序</p>
<p>Iterator:迭代输出，是使用最多的输出方式<br>ListIterator:是Iterator的子接口，专门用于list集合输出，双向输出<br>Enumeration:旧接口，功能与Iterator类似<br>foreach:可以输出数组或者集合，jdk1.5之后的功能</p>
<p>Iterator：<br>Iterator it = list.iterator();<br>方法：hasNext();是否有下一个值<br>       next();输出当前元素<br>       remove();删除当前元素</p>
<p> 注意点：<br> 一个集合把内容交给迭代器删除时候，因为集合也有remove方法，删除的时候调用<br> 了自身的删除方法，迭代器就会出现运行时错误（因为集合本身被破坏掉，所以迭代器<br> 就会中止迭代出现错误）<br> remove之前必须要执行it.next指向该元素，否则会出现异常</p>
<p> ListIterator<br> 如果想完成双向输出，则首先要完成由前向后的输出。  </p>
<p> Enumeration：<br> 无删除操作，类似于Iterator<br> 想要实现此接口只能通过Vector类elements方法</p>
<p>Map</p>
<p>HashMap：无序存放，key不允许重复，key可以为null<br>Hashtable：无需存放，旧的操作类，key不允许重复，key不可null<br>TreeMap:可以排序的Map集合，按照key排序，不允许重复<br>WeakTreeMap：弱引用Map集合，不在使用某些内容时gc回收<br>IdentityHashMap：key可以重复的Map集合</p>
<p>Map：<br>keySet（）方法，可以将所有的key变成一个Set集合<br>values（）方法返回Collection对象，得到所有value值</p>
<p>TreeMap 按照key排序<br>对象实现comparable接口</p>
<p>Map迭代：<br>1.将Map接口的实例通过entrySet（）方法变成Set接口对象<br>2.通过set接口实例为Iterator实例化<br>3.迭代输出每个对象都是Map.Entry对象<br>4.通过Map.Entry进行key–value的分离</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Map.Entry;</div><div class="line">import java.util.Set;</div><div class="line"></div><div class="line">public class Test &#123;</div><div class="line"></div><div class="line"> public static void main(String[] args) &#123;</div><div class="line">  Map&lt;String,String&gt; m=new HashMap&lt;String,String&gt;();</div><div class="line">        m.put(&quot;hah0&quot;, &quot;heh0&quot;);</div><div class="line">        m.put(&quot;hah1&quot;, &quot;heh1&quot;);</div><div class="line">        m.put(&quot;hah2&quot;, &quot;heh2&quot;);</div><div class="line">        m.put(&quot;hah3&quot;, &quot;heh3&quot;);</div><div class="line">        m.put(&quot;hah4&quot;, &quot;heh4&quot;);</div><div class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; s = m.entrySet();</div><div class="line">       Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it =s.iterator();</div><div class="line">      while(it.hasNext())&#123;</div><div class="line">      Map.Entry&lt;String, String&gt; me =it.next();</div><div class="line">       System.out.println(me.getKey()+me.getValue());</div><div class="line">       </div><div class="line">   </div><div class="line">      &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果要使用自己的匿名類作為key，則必須要复写其类中的equals和hashCode方法</p>
<p>SortedMap：<br>同SortedSet类似的原理</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象四大设计原则]]></title>
      <url>http://qianyu1996.com/2016/05/24/yuanze/</url>
      <content type="html"><![CDATA[<p></p><h1>面向抽象原则</h1><p></p>
<p></p><h2>1.1 抽象类</h2><br>特点：<br>        1.抽象类中的abstract方法可有可无，也可以有非abstract方法<br>        2.抽象类不能用new创建对象<br>        3.抽象类的非抽象子类必须重写父类的abstract方法<br>        4.作为向上转型对象。抽象类不能创建对象，但可以让抽象类的对象成为其非抽象子类的向上转型对象，调用子类的方法<br>        <a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">abstract class A &#123;  </div><div class="line">    public abstract int add(int x,int y);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">class B extends A &#123;  </div><div class="line">    public int add(int x, int y) &#123;  </div><div class="line">        return x+y;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">public class App &#123;  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        A a = new B();  </div><div class="line">        System.out.println(a.add(3, 4));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><h2>1.2 接口</h2><br>特点：<br>        1.接口中只能有public权限的abstract方法，不能有非abstract方法<br>        2.接口由类去实现，并且必须重写接口中的abstract方法<br>        3.接口回调。把实现接口的类的对象的引用赋给该接口声明的接口变量，那么此接口变量就可以调用被类实现的接口中的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">interface Com &#123;  </div><div class="line">    public abstract int sub(int x,int y);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">class ComImp implements Com &#123;  </div><div class="line">    public int sub(int x, int y) &#123;  </div><div class="line">        return x-y;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">public class App &#123;  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        Com com = new ComImp();  </div><div class="line">        System.out.println(com.sub(3, 4));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><h2>1.3 面向抽象</h2><br> 所谓面向抽象编程，就是指当设计一个类时，不该让类面向具体的类，而是面向抽象类或接口，即所设计的类中的重要数据是抽象类或接口声明的变量，而不是具体声明的变量。<br>        例如，现在有一个Circle类，有一个getArea()方法计算圆的面积：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Circle &#123;  </div><div class="line">    double r;  </div><div class="line">    Circle(double r) &#123;  </div><div class="line">        this.r = r;  </div><div class="line">    &#125;  </div><div class="line">    public double getArea() &#123;  </div><div class="line">        return(3.14*r*r);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p> 现在要设计一个Pillar类（柱体类），有一个getVolume方法计算体积<br>Pillar.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Pillar &#123;  </div><div class="line">    Circle bottom;  //将Circle对象作为成员  </div><div class="line">    double height;  </div><div class="line">    public Pillar(Circle bottom, double height) &#123;  </div><div class="line">        this.bottom = bottom;  </div><div class="line">        this.height = height;  </div><div class="line">    &#125;  </div><div class="line">    public double getVolume() &#123;  </div><div class="line">        return bottom.getArea()*height;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 现在来分析Pillar类，bottom是用具体类Circle类声明的变量，若用户需求不变化，则Pillar类可以这样设计。但如果用户希望求底是三角形的柱体的体积，显然上述Pillar类不能应对这种需求。<br>        因此需要重新设计Pillar类，这时不需要关心底是什么形状，而应该关心底是否有计算面积的方法。所以底不应该是某个具体类声明的变量，这样才能应对不同的需求。<br>接下来重新设计PIllar类。 首先设计一个抽象类（或接口）Geometry(几何)，有一个抽象的getArea()方法。<br>Geometry.java<br><code>public abstract class Geometry {<br>    public abstract double getArea();<br>}  </code></p>
<p>这样设计以后，Pillar类就不再依赖具体类，而是面向Geometry类，即Pillar类中的bottom是抽象类Geometry声明的变量。<br>Pillar.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Pillar &#123;  </div><div class="line">    Geometry bottom;    //bottom是抽象类Geometry声明的变量  </div><div class="line">    double height;  </div><div class="line">    public Pillar(Geometry bottom, double height) &#123;  </div><div class="line">        this.bottom = bottom;  </div><div class="line">        this.height = height;  </div><div class="line">    &#125;  </div><div class="line">    public double getVolume() &#123;  </div><div class="line">        return bottom.getArea()*height;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是让Circle和Rectangle（矩形）继承抽象类Geometry，并重写getArea()方法。<br>Circle.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Circle extends Geometry  &#123;  </div><div class="line">    double r;  </div><div class="line">    Circle(double r) &#123;  </div><div class="line">        this.r = r;  </div><div class="line">    &#125;  </div><div class="line">    public double getArea() &#123;  </div><div class="line">        return(3.14*r*r);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">public class Rectangle extends Geometry &#123;  </div><div class="line">    double length;  </div><div class="line">    double width;  </div><div class="line">    public Rectangle(double length, double width) &#123;  </div><div class="line">        this.length = length;  </div><div class="line">        this.width = width;  </div><div class="line">    &#125;  </div><div class="line">    public double getArea() &#123;  </div><div class="line">        return length*width;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 现在就可以用Pillar创建具有矩形底或圆形底的柱体了。<br>App.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class App &#123;  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        Pillar pillar;  </div><div class="line">        Geometry bottom;  </div><div class="line">          </div><div class="line">        bottom = new Rectangle(100, 50);  </div><div class="line">        pillar = new Pillar(bottom, 50);  </div><div class="line">        System.out.println(&quot;矩形底的柱体的体积：&quot; + pillar.getVolume());  </div><div class="line">          </div><div class="line">        bottom = new Circle(50);  </div><div class="line">        pillar = new Pillar(bottom, 50);  </div><div class="line">        System.out.println(&quot;圆形底的柱体的体积：&quot; + pillar.getVolume());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过面向抽象来设计Pillar类，使得Pillar类不再依赖具体类，因此每当系统增加Geometry的子类时，比如增加一个Triabgle子类，<br>那么不需要修改Pillar类的任何代码，就可以使用Pillar创建出具有三角形底的柱体。</p>
<p></p><h1>2. 开-闭原则</h1><br>所谓“开-闭原则“（Open-Closed Principle）就是让设计对扩展开放，对修改关闭。本质就是指当一个设计中增加新的模块时，不需要修改现有的模<br>块。在给出一个设计时，应当首先考虑到用户需求的变化，将最有可能变化的部分设计为对扩展开放，而设计的核心部分是精心考虑后确定下来的，应该<br>对修改关闭，即不能因为用户需求的改变而修改。<p></p>
<p></p><h1>3. 多用组合少用继承原则</h1><p></p>
<p></p><h2>3.1 继承与复用</h2><br>子类通过继承父类可以复用父类的方法<br>优点：<br>        1.子类在需要的时候可以重写父类的方法，易于修改或扩展那些被复用的方法<br>缺点：<br>        1.无法在运行期间改变从父类继承的方法的行为<br>        2.继承是强耦合的关系，即当父类的方法的行为改变时，必然导致子类相应方法改变<br>        3.通过继承复用也称为“白盒”复用，这样就是说父类的内部细节对于子类而言是可见的        <p></p>
<p></p><h2>3.2 组合与复用</h2><br>一个类将其它对象作为自己的组成部分，即Has-A，这样就可以通过委托其它对象调用其方法来达到复用的目的。<br>优点：<br>        1.组合复用称为“黑盒”复用，即当前对象对所包含对象的具体细节是不可见的<br>        2.组合是弱耦合的关系，即修改所包含的对象的类的代码，不必修改当前类的代码<br>        3.当前对象可以在运行时动态指定所包含的对象<br>缺点：<br>        1.导致系统中对象过多<br>        2.要组合多个对象时，必须仔细地对接口进行定义<p></p>
<p></p><h1>4. 高内聚-低耦合原则</h1><br> 高内聚：类中的方法是一组相关的行为<br> 低耦合：尽量不要让一个类含有太多其它类的实例引用，以避免“牵一发而动全身”<p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[反射机制复习笔记]]></title>
      <url>http://qianyu1996.com/2016/05/24/reflect/</url>
      <content type="html"><![CDATA[<p>1.了解反射的基本原理<br>2.掌握class类的使用<br>3.使用Class类并结合java.lang.reflect包取得一个类的完整结构<br>4.通过反射机制动态的调用类中指定的方法，并能向这些方法中传递参数<br><a id="more"></a></p>
<p>核心概念：一切的操作都将使用object进行完成，包括类，数组的应用都可以用object进行接收。</p>
<p>正常方式：引入包.类–通过new实例化对象–获取实例化对象<br>反射方式：获得实例化对象–getClass（）方法获得Class实例–得到完整的包.类名称</p>
<p>java.lang.Class是java.lang.Object的派生类，前者继承自后者。<br>在java中Object类是一切类的父类，那么所有对象实际上<br>也就是java.lang.Class类的实例，所以所有对象都可以转变为java.lang.Class类型表示。</p>
<p>实例化Class类对象：Class.forName（），类.class，对象.getClass（）;</p>
<p>用Class类对象本身实例化其他对象:<br>对象无参:用newInstance方法;<br>对象有参数:Constructor&lt;?&gt; con[] =Class.forName(“com.evan.reflect.Person2”).getConstructors();<br>调用Class实例的getConstrcuctors获得一个Constructor数组，再使用Constructor对象的newInstance()方法<br>实例化其他对象。得到的Object再进行向下转型。</p>
<p>取得类结构：<br>Constuctors表示类中的构造方法；<br>Field表示类中的属性；<br>Method表示类中的方法；<br>这三个都是AccessibleObject的子类它提供了将反射的对象标记为在使用时取消默认 Java 语言访问控制检查的能力</p>
<p>得到接口：Class&lt;?&gt;[] f = c.getInterfaces();<br>得到构造方法：Constructor&lt;?&gt;[] cons = c.getConstructors();（可直接打印出来）<br>构造方法拆分获得：<br>···<br>Constructor&lt;?&gt;[] cons = c.getConstructors();<br>for (int i = 0; i &lt; cons.length; i++) {<br>System.out.println(Modifier.toString(cons[i].getModifiers()));//把int变为权限修饰符<br>System.out.println(cons[i].getName());//获得方法名<br>Class&lt;?&gt;[] b = cons[i].getParameterTypes();//获得参数<br>for (int j = 0; j &lt; b.length; j++) {<br>System.out.print(b[j].getName() + “ arg” + i);<br>if (j &lt; b.length - 1) {<br>System.out.print(“,”);<br>} else {<br>System.out.println(“){}”);<br>}<br>}<br>} ···</p>
<p>得到父类：getSuperclass();<br>得到方法：Method[] m = c.getMethods();（可直接打印出来）<br>得到方法的返回值类型,异常类型： m[i].getReturnType().getName();<br>                                       Class&lt;?&gt;[] ex =m[i].getExceptionTypes();<br>                              ex[i].getName();<br>得到实现的接口或父类中的公共属性：public Field[] getFileds();<br>                                      f[i].getModifiers(访问权限)/getName(属性名)/getType(属性类型);<br>得到本类中的全部属性： public Filed[] getDeclaredFields();<br>                             f[i].getModifiers(访问权限)/getName(属性名)/getType(属性类型);</p>
<p>通过反射访问类中的方法。<br>···<br> Class&lt;?&gt; c=Class.forName(“……”);<br> Object obj = c.newInstance();<br> Method med = c.getMethod(“setCountry”,String.class);<br> med.invoke(obj,”haha”);</p>
<p>setter getter 反射实现：<br>class GetClassDemo6 {<br>public static void main(String[] args) {<br>Object per = null;<br>try {<br>per =Class.forName(“com.evan.reflect.Person4”).newInstance();<br>} catch (InstantiationException e) {<br>e.printStackTrace();<br>} catch (IllegalAccessException e) {</p>
<p>e.printStackTrace();<br>} catch (ClassNotFoundException e) {</p>
<p>e.printStackTrace();<br>}<br>setter(per, “name”, “sb”, String.class);<br>setter(per, “age”, 30, int.class);<br>getter(per, “name”);<br>getter(per, “age”);<br>}</p>
<p>public static void setter(Object obj, String arr, Object value, Class&lt;?&gt; type) {</p>
<p>try {<br>String s =”set”+up(arr);<br>Method met = obj.getClass().getMethod(s, type);<br>met.invoke(obj, value);<br>} catch (NoSuchMethodException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>} catch (SecurityException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>} catch (IllegalAccessException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>} catch (IllegalArgumentException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>} catch (InvocationTargetException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>}<br>}</p>
<p>public static void getter(Object obj, String arr) {<br>try {<br>String s =”get”+up(arr);<br>Method met = obj.getClass().getMethod(s);<br>System.out.println(met.invoke(obj));<br>} catch (NoSuchMethodException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>} catch (SecurityException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>} catch (IllegalAccessException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>} catch (IllegalArgumentException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>} catch (InvocationTargetException e) {<br>// TODO Auto-generated catch block<br>e.printStackTrace();<br>}</p>
<p>}</p>
<p>public static String up(String arr) {<br>String s = arr.substring(0, 1).toUpperCase() + arr.substring(1);<br>return s;<br>}<br>} ···</p>
<p>反射操作数组：<br>得到数组Class类型：Class&lt;?&gt; c = temp.getClass().getComponentType();<br>修改数组大小：<br>···<br>public static void main(String[] args) {<br>int temp[] = { 1, 2, 3 };<br>// Class&lt;?&gt; c = temp.getClass().getComponentType();//获得数组组件类型的 Class<br>// System.out.println(c.getName());//返回数组类型<br>int temp1[] = (int[]) arrayinc(temp, 5);<br>for (int i = 0; i &lt; temp1.length; i++) {<br>System.out.println(temp1[i]);<br>}<br>} ···<br>···<br>public static Object arrayinc(Object obj, int len) {<br>Class&lt;?&gt; c = obj.getClass();<br>Class&lt;?&gt; a = c.getComponentType();<br>Object Onew = Array.newInstance(a, len);<br>int co = Array.getLength(obj);<br>System.arraycopy(obj, 0, Onew, 0, co);<br>//源数组对象，从源下标位置开始，新数字，从新下标位置开始，复制源数组长度<br>return Onew;<br>} ···</p>
<p>Array类反射操作包中表示一个数组<br>Array.newInstance(a, len);新建一个数组，a表示任意数组组件类型的 Class对象<br>Array.getLength(obj);得到数组长度<br>Array.set(Object array，int index，int value);修改制定下标的内容</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端-原生Ajax理解]]></title>
      <url>http://qianyu1996.com/2016/05/20/ajax/</url>
      <content type="html"><![CDATA[<p>前言： 这两天在做一个人日记网站，基于前端+Servlet+JSP+JavaBean+tomcat+mysql实现，由于之前的实践很少碰到前端内容，这次自己搞也是边学边弄，到了js这块，必不可少的就是Ajax技术，博主花了一些时间去学习了一下，并做点总结。</p>
<p></p><h2 color="red">什么是Ajax?</h2><br><a id="more"></a><br>简单地说，如果你访问一个没有用到Ajax技术的网页，通常你点一下按钮就要刷新一下页面，尽管新页面上只有一行字和当前页面不一样，但你还是要无聊地等待页面刷新。用了AJAX之后，你点击，然后页面上的一行字就变化了，页面本身不用刷新。<br>Ajax的应用：<br>百度搜索提示，淘宝新会员注册时用户名验证，级联下拉列表，显示进度条……<p></p>
<p>补充一下下面的内容（摘录自知乎）：<br>ajax的全称是AsynchronousJavascript+XML。<br>异步传输+js+xml。<br>所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果我们可以再来处理这个事。（当然，在其他语境下这个解释可能就不对了）<br>这个很重要，如果不是这样的话，我们点完按钮，页面就会死在那里，其他的数据请求不会往下走了。这样比等待刷新似乎更加讨厌。<br>（虽然提供异步通讯功能的组件默认情况下都是异步的，但它们也提供了同步选项，如果你好奇把那个选项改为false的话，你的页面就会死在那里）<br>xml只是一种数据格式，在这件事里并不重要，我们在更新一行字的时候理论上说不需要这个格式，但如果我们更新很多内容，那么格式化的数据可以使我们有条理地去实现更新。</p>
<p></p><h2 color="green">过程及代码</h2><br>其实在博主的脑袋里，Ajax就是一个超级有用的XMLHttpRequest对象啦，ajax就可以让js读取服务器上的数据。<br>那么首先你要创建出这个对象了咯，一般来说，Ajax的使用就像打电话一样分为四步：<br>1.你得有个手机。<br>2.拨号。<br>3.你开始说话balabala。。。<br>4.听别人说。。。。<p></p>
<p>那么Ajax：<br>1.创建Ajax对象。<br>2.连接到服务器。<br>3.发送请求。<br> 4.接受返回值。</p>
<p>1.创建Ajax对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if (window.XMLHttpRequest) &#123; // Mozilla……等非IE浏览器</div><div class="line">var oAjax = new XMLHttpRequest(); // 创建XMLHttpRequest对象</div><div class="line">&#125; else if (window.ActiveXObject) &#123; // IE浏览器</div><div class="line">try &#123;</div><div class="line">var oAjax = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); // 创建XMLHttpRequest对象</div><div class="line">&#125; catch (e) &#123;</div><div class="line">try &#123;</div><div class="line">var oAjax = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); // 创建XMLHttpRequest对象</div><div class="line">&#125; catch (e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每个浏览器对Ajax的支持是不同的，创建的方式也不同，以上判断代码就展示了在IE浏览器和非IE浏览器环境下用各自不同的方式创建XMLHttpRequest对象。<br>这里要注意一下js的一个特性，在使用判断时必须使用window.XMLHttpRequest而不能使用XMLHttpRquest,在js中用没有定义的变量会报错，使用没有定义的属性不会报错，而是仅仅给你一个undefined提示，在IE6浏览器下，XMLHttpRequest是没有定义的，考虑到兼容性问题，必须使用window.XMLHttpRequest来充当判断条件，这时浏览器就把它当window的一个属性，返回undefined而非报错，这就是我们需要的。</p>
<p>2.连接到服务器。</p>
<p><code>oAjax.open();</code><br>open()有三个参数，第一个参数为发送方式，值为POST，GET<br>第二个参数为你要访问的文件的url。<br>第三个为 值为true 或者 false ，true代表采用异步传输方式连接服务器。</p>
<p>3.发送请求<br><code>oAjax.send();</code></p>
<p>4 .接受返回值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">funtion getResult()&#123;</div><div class="line">if(oAjax.readyState==4)&#123;</div><div class="line">      if(oAjax.status==200)&#123;</div><div class="line">                            alert(oAjax.reponseText);</div><div class="line">                            &#125;else&#123;alert(&quot;访问失败&quot;);&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>readyState的值所代表的状态：<br>0：请求未初始化（还没有调用 open()）。<br>1：请求已经建立，但是还没有发送（还没有调用 send()）。<br>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。<br>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。<br>4：响应已完成；您可以获取并使用服务器的响应了。<br>       status的值所代表的状态（最常见的5种）：<br>       1.200表示成功<br>       2.202表示请求被接受，但尚未成功<br>       3.400错误的请求<br>       4.404文件未找到<br>       5.500内部服务器错误</p>
<p>四部曲完成了，为了提高的代码重用性，可以将代码封装到一个.js文件中，代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">var net = new Object(); // 定义一个全局变量net</div><div class="line">// 编写构造函数</div><div class="line">net.AjaxRequest = function(url, onload, onerror, method, params) &#123;</div><div class="line">this.req = null;</div><div class="line">this.onload = onload;</div><div class="line">this.onerror = (onerror) ? onerror : this.defaultError;</div><div class="line">this.loadDate(url, method, params);</div><div class="line">&#125;</div><div class="line">// 编写用于初始化XMLHttpRequest对象并指定处理函数，最后发送HTTP请求的方法</div><div class="line">net.AjaxRequest.prototype.loadDate = function(url, method, params) &#123;</div><div class="line">if (!method) &#123; // 设置默认为的请求方式为GET</div><div class="line">method = &quot;GET&quot;;</div><div class="line">&#125;</div><div class="line">if (window.XMLHttpRequest) &#123; // Mozilla……等非IE浏览器</div><div class="line">this.req = new XMLHttpRequest(); // 创建XMLHttpRequest对象</div><div class="line">&#125; else if (window.ActiveXObject) &#123; // IE浏览器</div><div class="line">try &#123;</div><div class="line">this.req = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); // 创建XMLHttpRequest对象</div><div class="line">&#125; catch (e) &#123;</div><div class="line">try &#123;</div><div class="line">this.req = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); // 创建XMLHttpRequest对象</div><div class="line">&#125; catch (e) &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">if (this.req) &#123;</div><div class="line">try &#123;</div><div class="line">var loader = this;</div><div class="line">// 指定回调函数</div><div class="line">this.req.onreadystatechange = function() &#123;</div><div class="line">net.AjaxRequest.onReadyState.call(loader);</div><div class="line">&#125;</div><div class="line">this.req.open(method, url, true); // 创建与服务器的连接</div><div class="line">if (method == &quot;POST&quot;) &#123; // 当发送POST请求时，设置请求头</div><div class="line">this.req.setRequestHeader(&quot;Content-Type&quot;,</div><div class="line">&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">&#125;</div><div class="line">this.req.send(params); // 向服务器发送请求</div><div class="line">&#125; catch (err) &#123;</div><div class="line">this.onerror.call(this); // 调用错误处理函数</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 重构回调函数</div><div class="line">net.AjaxRequest.onReadyState = function() &#123;</div><div class="line">var req = this.req;</div><div class="line">var ready = req.readyState; // 获取请求状态</div><div class="line">if (ready == 4) &#123;</div><div class="line">if (req.status == 200) &#123;</div><div class="line">this.onload.call(this); // 调用回调函数</div><div class="line">&#125; else &#123;</div><div class="line">this.onerror.call(this); // 调用错误处理函数</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">// 重构默认的错误处理函数</div><div class="line">net.AjaxRequest.prototype.defaultError = function() &#123;</div><div class="line">alert(&quot;错误数据\n\n回调状态:&quot; + this.req.readyState + &quot;\n状态: &quot; + this.req.status);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
